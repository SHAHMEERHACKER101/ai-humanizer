// NexusRank Pro - Cloudflare Worker Backend
// This worker handles all AI processing requests using DeepSeek API

// CORS headers for cross-origin requests
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization',
};

// Tool configurations with prompts
const TOOL_PROMPTS = {
  'seo-writer': {
    systemPrompt: `You are an expert SEO content writer. Create comprehensive, SEO-optimized articles that are engaging, well-structured, and designed to rank high in search engines. Include relevant keywords naturally, use proper heading structure, and ensure content is valuable to readers.`,
    processInput: (input, options) => {
      const wordCount = options['Word Count'] || '1000-2000';
      const tone = options['Tone'] || 'Professional';
      return `Write a comprehensive SEO-optimized article about: "${input}"\n\nRequirements:\n- Word count: ${wordCount}\n- Tone: ${tone}\n- Include proper SEO structure with H1, H2, H3 headings\n- Naturally incorporate relevant keywords\n- Write engaging, valuable content for readers\n- Include meta description suggestions\n- Ensure proper keyword density and readability`;
    }
  },
  'humanizer': {
    systemPrompt: `You are an expert at transforming AI-generated content into natural, human-like text. Make content sound more conversational, authentic, and engaging while preserving the original meaning and key information.`,
    processInput: (input, options) => {
      const style = options['Style'] || 'Natural';
      const complexity = options['Complexity'] || 'Medium';
      return `Transform this AI-generated content into natural, human-like text:\n\n"${input}"\n\nStyle: ${style}\nComplexity: ${complexity}\n\nMake it sound more conversational, authentic, and engaging while preserving all key information and meaning.`;
    }
  },
  'detector': {
    systemPrompt: `You are an AI content detection expert. Analyze text to determine if it was likely generated by AI or written by a human. Provide detailed analysis including confidence scores, reasoning, and specific indicators.`,
    processInput: (input, options) => {
      const sensitivity = options['Sensitivity'] || 'Medium';
      const analysisType = options['Analysis Type'] || 'Detailed';
      return `Analyze this text to determine if it was AI-generated or human-written:\n\n"${input}"\n\nSensitivity: ${sensitivity}\nAnalysis Type: ${analysisType}\n\nProvide:\n1. Likelihood score (0-100% AI-generated)\n2. Key indicators supporting your assessment\n3. Specific phrases or patterns that suggest AI or human authorship\n4. Overall confidence in your analysis\n5. Recommendations for improvement if AI-generated`;
    }
  },
  'paraphraser': {
    systemPrompt: `You are an expert paraphrasing specialist. Rewrite content while preserving the original meaning, improving clarity, and ensuring uniqueness. Maintain the core message while using different vocabulary and sentence structures.`,
    processInput: (input, options) => {
      const rewriteLevel = options['Rewrite Level'] || 'Medium';
      const style = options['Style'] || 'Professional';
      return `Paraphrase this content while preserving its meaning:\n\n"${input}"\n\nRewrite Level: ${rewriteLevel}\nStyle: ${style}\n\nRequirements:\n- Maintain original meaning and key points\n- Use different vocabulary and sentence structures\n- Improve clarity and readability\n- Ensure content is unique and plagiarism-free\n- Match the specified style and rewrite intensity`;
    }
  },
  'grammar': {
    systemPrompt: `You are an expert grammar and style checker. Identify and correct grammar, spelling, punctuation, and style issues. Provide clear explanations for corrections and suggestions for improvement.`,
    processInput: (input, options) => {
      const checkLevel = options['Check Level'] || 'Standard';
      const language = options['Language'] || 'US English';
      return `Check and correct grammar, spelling, and style issues in this text:\n\n"${input}"\n\nCheck Level: ${checkLevel}\nLanguage: ${language}\n\nProvide:\n1. Corrected version of the text\n2. List of specific errors found and corrections made\n3. Explanations for major corrections\n4. Style and readability suggestions\n5. Overall writing quality assessment`;
    }
  },
  'improver': {
    systemPrompt: `You are a professional content improvement specialist. Enhance text quality by improving clarity, engagement, structure, and overall effectiveness while maintaining the original intent.`,
    processInput: (input, options) => {
      const improvementType = options['Improvement Type'] || 'Clarity';
      const targetAudience = options['Target Audience'] || 'General';
      return `Improve this text for better quality and engagement:\n\n"${input}"\n\nImprovement Focus: ${improvementType}\nTarget Audience: ${targetAudience}\n\nEnhance:\n- Clarity and readability\n- Engagement and flow\n- Structure and organization\n- Word choice and tone\n- Overall effectiveness for the target audience\n\nProvide both the improved version and a summary of key changes made.`;
    }
  }
};

// DeepSeek API call function
async function callDeepSeekAPI(prompt, systemPrompt, env) {
  const apiKey = env.DEEPSEEK_API_KEY; // Environment variable from Cloudflare
  
  if (!apiKey) {
    throw new Error('DeepSeek API key not configured');
  }

  const response = await fetch('https://api.deepseek.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'deepseek-chat',
      messages: [
        {
          role: 'system',
          content: systemPrompt
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      max_tokens: 4000,
      temperature: 0.7,
      stream: false
    }),
  });

  if (!response.ok) {
    const errorData = await response.text();
    console.error('DeepSeek API Error:', response.status, errorData);
    throw new Error(`DeepSeek API error: ${response.status} - ${errorData}`);
  }

  const data = await response.json();
  
  if (!data.choices || !data.choices[0] || !data.choices[0].message) {
    throw new Error('Invalid response format from DeepSeek API');
  }

  return data.choices[0].message.content;
}

// Process tool request
async function processToolRequest(action, input, options, env) {
  const toolConfig = TOOL_PROMPTS[action];
  
  if (!toolConfig) {
    throw new Error(`Unknown tool: ${action}`);
  }

  if (!input || input.trim().length === 0) {
    throw new Error('Input text is required');
  }

  // Generate the prompt using tool-specific logic
  const prompt = toolConfig.processInput(input, options || {});
  const systemPrompt = toolConfig.systemPrompt;

  // Call DeepSeek API
  const result = await callDeepSeekAPI(prompt, systemPrompt, env);
  
  return result;
}

// Main worker event listener
export default {
  async fetch(request, env, ctx) {
    return handleRequest(request, env);
  },
};

async function handleRequest(request, env) {
  const url = new URL(request.url);
  
  // Health check endpoint
  if (url.pathname === '/health') {
    return new Response(JSON.stringify({
      status: 'healthy',
      timestamp: new Date().toISOString(),
      version: '1.0.0'
    }), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
        ...corsHeaders
      }
    });
  }
  
  // Handle CORS preflight requests
  if (request.method === 'OPTIONS') {
    return new Response(null, {
      status: 200,
      headers: corsHeaders
    });
  }

  // Only handle POST requests for API calls
  if (request.method !== 'POST') {
    return new Response('Method not allowed', {
      status: 405,
      headers: corsHeaders
    });
  }

  try {
    // Parse request body
    const requestData = await request.json();
    const { action, input, options } = requestData;

    // Validate request
    if (!action || !input) {
      return new Response(JSON.stringify({
        success: false,
        error: 'Missing required fields: action and input'
      }), {
        status: 400,
        headers: {
          'Content-Type': 'application/json',
          ...corsHeaders
        }
      });
    }

    // Process the request
    const result = await processToolRequest(action, input, options, env);

    // Return success response
    return new Response(JSON.stringify({
      success: true,
      output: result,
      action: action,
      timestamp: new Date().toISOString()
    }), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
        ...corsHeaders
      }
    });

  } catch (error) {
    console.error('Worker Error:', error);
    
    // Return error response
    return new Response(JSON.stringify({
      success: false,
      error: error.message || 'Internal server error',
      action: 'error',
      timestamp: new Date().toISOString()
    }), {
      status: 500,
      headers: {
        'Content-Type': 'application/json',
        ...corsHeaders
      }
    });
  }
}

// Health check is handled in main handleRequest function